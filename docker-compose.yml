services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: damocles-postgres
    environment:
      POSTGRES_DB: damocles
      POSTGRES_USER: damocles_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-damocles_dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U damocles_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - damocles-network

  redis:
    image: redis:7-alpine
    container_name: damocles-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - damocles-network

  # Application Services
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: damocles-user-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://damocles_user:${DB_PASSWORD:-damocles_dev_password}@postgres:5432/damocles
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-in-production}
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    networks:
      - damocles-network
    restart: unless-stopped

  gdpr-engine:
    build:
      context: ./services/gdpr-engine
      dockerfile: Dockerfile
    container_name: damocles-gdpr-engine
    environment:
      ENVIRONMENT: development
      PORT: 8001
      USER_SERVICE_URL: http://user-service:3001
      TRUST_ENGINE_URL: http://trust-engine:3003
      BLOCKCHAIN_SERVICE_URL: http://blockchain-service:8021
      SMTP_SERVER: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
    ports:
      - "8001:8001"
    depends_on:
      - user-service
    volumes:
      - ./services/gdpr-engine:/app
      - gdpr_templates:/app/templates
    networks:
      - damocles-network
    restart: unless-stopped

  trust-engine:
    build:
      context: ./services/trust-engine
      dockerfile: Dockerfile
    container_name: damocles-trust-engine
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://damocles_user:${DB_PASSWORD:-damocles_dev_password}@postgres:5432/damocles
      REDIS_URL: redis://redis:6379
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/trust-engine:/app
      - /app/node_modules
    networks:
      - damocles-network
    restart: unless-stopped

  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
    container_name: damocles-blockchain-service
    environment:
      NODE_ENV: development
      PORT: 8021
      CARDANO_NETWORK: ${CARDANO_NETWORK:-testnet}
      BLOCKFROST_API_KEY: ${NEXT_PUBLIC_BLOCKFROST_API_KEY:-testnetXXXXXXXXXXXXXXXXXX}
      TREASURY_ADDRESS: ${NEXT_PUBLIC_TREASURY_ADDRESS_TESTNET:-}
      SWORD_POLICY: ${NEXT_PUBLIC_SWORD_POLICY_TESTNET:-}
    ports:
      - "8021:8021"
    volumes:
      - ./services/blockchain-service:/app
      - /app/node_modules
    networks:
      - damocles-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: damocles-payment-service
    environment:
      NODE_ENV: development
      PORT: 3006
      DATABASE_URL: postgresql://damocles_user:${DB_PASSWORD:-damocles_dev_password}@postgres:5432/damocles
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_...}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_...}
      USER_SERVICE_URL: http://user-service:3001
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
    volumes:
      - ./services/payment-service:/app
      - /app/node_modules
    networks:
      - damocles-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: damocles-notification-service
    environment:
      NODE_ENV: development
      PORT: 3005
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      REDIS_URL: redis://redis:6379
    ports:
      - "3005:3005"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    networks:
      - damocles-network
    restart: unless-stopped

  # Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: damocles-frontend
    environment:
      NODE_ENV: development
      PORT: 3002
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXTAUTH_URL: http://localhost:3002
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-secret-key-123-change-in-production}
      JWT_SECRET: ${JWT_SECRET:-another-secret-key-for-jwt-tokens}
      VIPPS_CLIENT_ID: ${VIPPS_CLIENT_ID:-}
      VIPPS_CLIENT_SECRET: ${VIPPS_CLIENT_SECRET:-}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-pk_test_...}
      NEXT_PUBLIC_CARDANO_NETWORK: ${CARDANO_NETWORK:-testnet}
      NEXT_PUBLIC_BLOCKFROST_API_KEY: ${NEXT_PUBLIC_BLOCKFROST_API_KEY:-testnetXXXXXXXXXXXXXXXXXX}
    ports:
      - "3002:3002"
    depends_on:
      - user-service
      - gdpr-engine
      - trust-engine
      - blockchain-service
      - payment-service
      - notification-service
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - damocles-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  gdpr_templates:
    driver: local

networks:
  damocles-network:
    driver: bridge