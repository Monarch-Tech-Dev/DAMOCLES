generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  personalNumberHash    String?  @unique @map("personal_number_hash")
  email                 String   @unique
  name                  String?
  passwordHash          String?  @map("password_hash")
  phoneNumber           String?  @map("phone_number")

  // Address fields - required for GDPR legal identity verification
  streetAddress         String?  @map("street_address")
  postalCode            String?  @map("postal_code")
  city                  String?
  country               String?  @default("Norway")
  dateOfBirth           DateTime? @map("date_of_birth")

  // Profile completion tracking
  gdprProfileComplete   Boolean  @default(false) @map("gdpr_profile_complete")

  vippsVerified         Boolean  @default(false) @map("vipps_verified")
  vippsUserId           String?  @unique @map("vipps_user_id")
  bankIdVerified        Boolean  @default(false) @map("bankid_verified")
  riskScore             Float?   @map("risk_score")
  shieldTier            String   @default("Bronze Shield") @map("shield_tier")
  tokenBalance          Float    @default(0) @map("token_balance")
  onboardingStatus      String   @default("PENDING") @map("onboarding_status")
  isActive              Boolean  @default(true) @map("is_active")
  lastLoginAt           DateTime? @map("last_login_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  debts                 Debt[]
  gdprRequests          GdprRequest[]
  settlements           Settlement[]
  tokenTransactions     TokenTransaction[]
  pdiProfile            PDIProfile?
  authorizations        UserAuthorization[]
  platformEmails        PlatformEmail[]
  invoices              Invoice[]
  payments              Payment[]
  documents             Document[]

  @@map("users")
}

model Creditor {
  id                    String   @id @default(cuid())
  name                  String
  organizationNumber    String?  @unique @map("organization_number")
  type                  String   // 'inkasso', 'bnpl', 'bank', etc
  privacyEmail          String?  @map("privacy_email")
  violationScore        Float    @default(0) @map("violation_score")
  totalViolations       Int      @default(0) @map("total_violations")
  averageSettlementRate Float?   @map("average_settlement_rate")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  debts                 Debt[]
  gdprRequests          GdprRequest[]
  violations            Violation[]
  platformEmails        PlatformEmail[]

  @@map("creditors")
}

model Debt {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  creditorId       String   @map("creditor_id")
  originalAmount   Float    @map("original_amount")
  currentAmount          Float    @map("current_amount")
  recoveredAmount        Float?   @map("recovered_amount")
  status                 String   // 'active', 'negotiating', 'settled', 'recovered'
  platformFeeStatus      String?  @map("platform_fee_status") // 'pending', 'paid', 'waived'
  platformFeePaidAt      DateTime? @map("platform_fee_paid_at")
  accountNumber          String?  @map("account_number")
  description            String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user             User     @relation(fields: [userId], references: [id])
  creditor         Creditor @relation(fields: [creditorId], references: [id])
  settlements      Settlement[]
  invoices         Invoice[]
  documents        Document[]

  @@map("debts")
}

model GdprRequest {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  creditorId          String    @map("creditor_id")
  referenceId         String    @unique @map("reference_id")
  content             String?
  status              String    // 'draft', 'sent', 'responded', 'escalated'
  sentAt              DateTime? @map("sent_at")
  responseDue         DateTime? @map("response_due")
  responseReceivedAt  DateTime? @map("response_received_at")
  trackingPixelViewed Boolean   @default(false) @map("tracking_pixel_viewed")
  vippsVerifiedAtSend Boolean   @default(false) @map("vipps_verified_at_send") // Vipps verification status at time of sending
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  user                User      @relation(fields: [userId], references: [id])
  creditor            Creditor  @relation(fields: [creditorId], references: [id])
  violations          Violation[]
  responses           GdprResponse[]
  documents           Document[]

  @@map("gdpr_requests")
}

model GdprResponse {
  id              String   @id @default(cuid())
  requestId       String   @map("request_id")
  content         Bytes?
  extractedData   String?  @map("extracted_data")
  format          String   // 'pdf', 'email', 'json'
  receivedAt      DateTime @default(now()) @map("received_at")

  request         GdprRequest @relation(fields: [requestId], references: [id])

  @@map("gdpr_responses")
}

model Document {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  gdprRequestId   String?  @map("gdpr_request_id")
  debtId          String?  @map("debt_id")
  fileName        String   @map("file_name")
  fileType        String   @map("file_type") // 'bill', 'invoice', 'correspondence', 'identity', 'other'
  mimeType        String   @map("mime_type") // 'application/pdf', 'image/png', etc.
  fileSize        Int      @map("file_size") // in bytes
  filePath        String   @map("file_path") // Storage path or URL
  description     String?
  uploadedAt      DateTime @default(now()) @map("uploaded_at")

  user            User     @relation(fields: [userId], references: [id])
  gdprRequest     GdprRequest? @relation(fields: [gdprRequestId], references: [id])
  debt            Debt?    @relation(fields: [debtId], references: [id])

  @@map("documents")
}

model Violation {
  id              String   @id @default(cuid())
  gdprRequestId   String?  @map("gdpr_request_id")
  creditorId      String   @map("creditor_id")
  type            String
  severity        String   // 'low', 'medium', 'high', 'critical'
  confidence      Float
  evidence        String
  legalReference  String   @map("legal_reference")
  estimatedDamage Float    @map("estimated_damage")
  blockchainHash  String?  @map("blockchain_hash")
  ipfsHash        String?  @map("ipfs_hash")
  status          String   @default("PENDING") // 'PENDING', 'VERIFIED', 'DISPUTED'
  createdAt       DateTime @default(now()) @map("created_at")

  gdprRequest     GdprRequest? @relation(fields: [gdprRequestId], references: [id])
  creditor        Creditor     @relation(fields: [creditorId], references: [id])

  @@map("violations")
}

model Settlement {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  debtId                String    @map("debt_id")
  originalAmount        Float     @map("original_amount")
  settledAmount         Float     @map("settled_amount")
  savedAmount           Float     @map("saved_amount")
  platformFee           Float     @map("platform_fee")
  status                String    // 'proposed', 'negotiating', 'accepted', 'rejected', 'completed'
  smartContractAddress  String?   @map("smart_contract_address")
  transactionHash       String?   @map("transaction_hash")
  proposedAt            DateTime  @default(now()) @map("proposed_at")
  completedAt           DateTime? @map("completed_at")

  user                  User      @relation(fields: [userId], references: [id])
  debt                  Debt      @relation(fields: [debtId], references: [id])

  @@map("settlements")
}

model TokenTransaction {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  type            String   // 'mining', 'staking', 'reward', 'purchase', 'settlement', 'pdi_tracking', 'pdi_improvement'
  amount          Float
  transactionHash String?  @map("transaction_hash")
  status          String   // 'pending', 'confirmed', 'failed'
  metadata        String?
  createdAt       DateTime @default(now()) @map("created_at")

  user            User     @relation(fields: [userId], references: [id])

  @@map("token_transactions")
}

// PDI (Personal Debt Index) Models
model PDIProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  currentScore         Int      @map("current_score") // 0-100
  scoreCategory        String   @map("score_category") // 'healthy', 'caution', 'risky', 'critical'
  lastCalculated       DateTime @map("last_calculated")
  calculationVersion   String   @map("calculation_version") @default("1.0.0")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user                 User         @relation(fields: [userId], references: [id])
  metrics              PDIMetric[]
  inputs               PDIInput[]
  history              PDIHistory[]
  alerts               PDIAlert[]

  @@map("pdi_profiles")
}

model PDIMetric {
  id           String   @id @default(cuid())
  profileId    String   @map("profile_id")
  metricType   String   @map("metric_type") // 'dti', 'dsr', 'credit_utilization', 'debt_to_assets', 'debt_growth'
  metricValue  Float    @map("metric_value")
  metricScore  Int      @map("metric_score") // 0-20
  calculatedAt DateTime @default(now()) @map("calculated_at")

  profile      PDIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("pdi_metrics")
}

model PDIInput {
  id                    String   @id @default(cuid())
  profileId             String   @map("profile_id")
  monthlyIncome         Float    @map("monthly_income")
  totalDebt             Float    @map("total_debt")
  monthlyDebtPayments   Float    @map("monthly_debt_payments")
  availableCredit       Float    @map("available_credit")
  creditUsed            Float    @map("credit_used")
  totalAssets           Float    @map("total_assets")
  previousMonthDebt     Float?   @map("previous_month_debt")
  inputDate             DateTime @default(now()) @map("input_date")

  profile               PDIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("pdi_inputs")
}

model PDIHistory {
  id            String   @id @default(cuid())
  profileId     String   @map("profile_id")
  score         Int
  scoreCategory String   @map("score_category")
  metrics       String   // JSON string of metrics
  recordedAt    DateTime @default(now()) @map("recorded_at")

  profile       PDIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("pdi_history")
}

model PDIAlert {
  id                       String    @id @default(cuid())
  profileId                String    @map("profile_id")
  alertType                String    @map("alert_type") // 'score_critical', 'rapid_decline', 'metric_warning', 'improvement'
  alertMessage             String    @map("alert_message")
  triggerValue             Float?    @map("trigger_value")
  damoclesActionTriggered  Boolean   @default(false) @map("damocles_action_triggered")
  actionId                 String?   @map("action_id") // References GDPR request or other actions
  createdAt                DateTime  @default(now()) @map("created_at")
  acknowledgedAt           DateTime? @map("acknowledged_at")

  profile                  PDIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("pdi_alerts")
}

model PDIRegionalData {
  id                  String   @id @default(cuid())
  regionCode          String   @map("region_code")
  regionName          String   @map("region_name")
  countryCode         String   @map("country_code")
  averagePDI          Float?   @map("average_pdi")
  totalProfiles       Int      @default(0) @map("total_profiles")
  criticalPercentage  Float?   @map("critical_percentage")
  lastUpdated         DateTime @default(now()) @map("last_updated")

  @@unique([regionCode, countryCode])
  @@map("pdi_regional_data")
}

// Learning Evolution Models
model LearningEvent {
  id                  String    @id @default(cuid())
  eventType           String    @map("event_type") // 'gdpr_sent', 'response_received', 'admission_found', 'settlement_reached'
  userId              String    @map("user_id")
  creditorId          String    @map("creditor_id")
  strategy            String
  success             Boolean
  admissionText       String?   @map("admission_text")
  pdiImpact           Float?    @map("pdi_impact")
  recoveryAmount      Decimal?  @map("recovery_amount")
  responseTimeHours   Float?    @map("response_time_hours")
  violationType       String?   @map("violation_type")
  metadata            String?   // JSON
  timestamp           DateTime  @default(now())

  @@map("learning_events")
}


model ClassAction {
  id                String    @id @default(cuid())
  referenceId       String    @unique @map("reference_id")
  creditorId        String    @map("creditor_id")
  title             String
  description       String
  affectedUserIds   String    @map("affected_user_ids") // JSON array
  totalHarm         Decimal   @map("total_harm")
  evidencePackage   String    @map("evidence_package") // JSON
  status            String    // 'initiated', 'gathering', 'filed', 'in_progress', 'settled', 'won', 'lost'
  blockchainHash    String?   @map("blockchain_hash")
  ipfsHash          String?   @map("ipfs_hash")
  legalCounsel      String?   @map("legal_counsel")
  settlementAmount  Decimal?  @map("settlement_amount")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  filedAt           DateTime? @map("filed_at")
  settledAt         DateTime? @map("settled_at")

  @@map("class_actions")
}

// Platform Communication Models
model UserAuthorization {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  creditorId      String?   @map("creditor_id") // If null, applies to all creditors
  scope           String    // JSON: ['send_gdpr', 'receive_responses', 'follow_up']
  platformEmail   String    @map("platform_email") // user-12345@damocles.no
  replyToEmail    String    @map("reply_to_email") // responses@damocles.no
  ccUserEmail     Boolean   @map("cc_user_email") @default(true)
  validUntil      DateTime  @map("valid_until")
  isActive        Boolean   @map("is_active") @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, creditorId])
  @@map("user_authorizations")
}

model PlatformEmail {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  creditorId      String    @map("creditor_id")
  direction       String    // 'outbound' | 'inbound'
  fromEmail       String    @map("from_email")
  toEmail         String    @map("to_email")
  ccEmails        String    @map("cc_emails") // JSON array
  subject         String
  bodyHtml        String    @map("body_html")
  bodyText        String    @map("body_text")
  templateUsed    String?   @map("template_used")
  userApproved    Boolean   @map("user_approved") @default(false)
  status          String    // 'draft', 'pending_approval', 'approved', 'sent', 'delivered', 'responded', 'failed'
  sentAt          DateTime? @map("sent_at")
  deliveredAt     DateTime? @map("delivered_at")
  respondedAt     DateTime? @map("responded_at")
  trackingId      String    @unique @map("tracking_id")
  messageId       String?   @unique @map("message_id")
  inReplyTo       String?   @map("in_reply_to")
  references      String?   @map("references")
  metadata        String?   // JSON - parsing results, strategy, etc.
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user            User      @relation(fields: [userId], references: [id])
  creditor        Creditor  @relation(fields: [creditorId], references: [id])
  parsing         EmailParsing?

  @@map("platform_emails")
}

model EmailParsing {
  id                  String    @id @default(cuid())
  platformEmailId     String    @unique @map("platform_email_id")
  admissions          String    // JSON: Detected admissions
  violations          String    // JSON: Detected violations
  refundOffers        String    @map("refund_offers") // JSON
  newDocuments        String    @map("new_documents") // JSON
  legalThreats        String    @map("legal_threats") // JSON
  escalationTriggers  String    @map("escalation_triggers") // JSON
  sentiment           String    // 'positive', 'neutral', 'negative', 'hostile'
  requiresHumanReview Boolean   @map("requires_human_review") @default(false)
  confidence          Float     @default(0.0)
  parsedAt            DateTime  @default(now()) @map("parsed_at")

  platformEmail       PlatformEmail @relation(fields: [platformEmailId], references: [id])

  @@map("email_parsing")
}

model Invoice {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  caseId              String    @map("case_id") // Debt ID
  recoveryAmount      Float     @map("recovery_amount")
  platformFee         Float     @map("platform_fee") // 25% of recovery
  vatAmount           Float     @map("vat_amount") // 25% VAT on platform fee
  processingFee       Float     @map("processing_fee") // Payment processing fee
  totalDue            Float     @map("total_due") // platformFee + vat + processing
  status              String    @default("pending") // 'pending', 'paid', 'overdue', 'cancelled'
  description         String?
  dueDate             DateTime  @map("due_date")
  paidAt              DateTime? @map("paid_at")
  paymentId           String?   @unique @map("payment_id") // Stripe/Vipps payment ID
  generatedAt         DateTime  @default(now()) @map("generated_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  user                User      @relation(fields: [userId], references: [id])
  debt                Debt      @relation(fields: [caseId], references: [id])
  payments            Payment[]

  @@map("invoices")
}

model Payment {
  id                  String    @id @default(cuid())
  invoiceId           String    @map("invoice_id")
  userId              String    @map("user_id")
  amount              Float
  method              String    // 'stripe', 'vipps', 'bank_transfer'
  status              String    @default("processing") // 'processing', 'completed', 'failed', 'refunded'
  externalId          String?   @unique @map("external_id") // Stripe/Vipps payment ID
  phoneNumber         String?   @map("phone_number") // For Vipps payments
  description         String?
  metadata            String?   // JSON metadata
  processedAt         DateTime? @map("processed_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  invoice             Invoice   @relation(fields: [invoiceId], references: [id])
  user                User      @relation(fields: [userId], references: [id])

  @@map("payments")
}

// ==============================================================================
// EVENT SOURCING & LEGAL COMPLIANCE MODELS
// For immutable audit trail and legal proceedings evidence
// ==============================================================================

model PrivacyEvent {
  id            String   @id @default(cuid())
  aggregateId   String   @map("aggregate_id")     // case_id or collector_id
  aggregateType String   @map("aggregate_type")   // 'case', 'collector', 'user'
  eventType     String   @map("event_type")       // 'DSAR_SUBMITTED', 'VIOLATION_DETECTED', etc.
  eventData     String   @map("event_data")       // JSON data
  metadata      String?                           // Additional JSON metadata
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String?  @map("created_by")       // User ID who triggered event

  @@index([aggregateId, createdAt])
  @@index([eventType])
  @@index([aggregateType])
  @@map("privacy_events")
}

model CollectorRiskScore {
  id                    String   @id @default(cuid())
  collectorId           String   @unique @map("collector_id")
  riskScore             Float    @default(0.0) @map("risk_score")
  totalViolations       Int      @default(0) @map("total_violations")
  violationScore        Float    @default(0.0) @map("violation_score")
  responseScore         Float    @default(0.0) @map("response_score")
  severityScore         Float    @default(0.0) @map("severity_score")
  enforcementScore      Float    @default(0.0) @map("enforcement_score")
  confidenceLevel       Float    @default(0.0) @map("confidence_level")
  affectedUsers         Int      @default(0) @map("affected_users")
  lastCalculated        DateTime @updatedAt @map("last_calculated")

  @@index([riskScore])
  @@index([totalViolations])
  @@map("collector_risk_scores")
}

model ViolationPattern {
  id              String   @id @default(cuid())
  collectorId     String   @map("collector_id")
  article         String                        // 'GDPR_15', 'GDPR_22', etc.
  violationType   String   @map("violation_type") // 'SETTLEMENT_LOGIC', 'DATA_CONTRADICTION', etc.
  occurrenceCount Int      @default(1) @map("occurrence_count")
  severity        String                        // 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'
  firstDetected   DateTime @default(now()) @map("first_detected")
  lastDetected    DateTime @updatedAt @map("last_detected")

  @@unique([collectorId, article, violationType])
  @@index([collectorId])
  @@index([severity])
  @@map("violation_patterns")
}

model ResponsePattern {
  id                    String   @id @default(cuid())
  creditorId            String   @map("creditor_id")
  triggerPhrase         String   @map("trigger_phrase")
  successRate           Float    @map("success_rate")
  admissionType         String   @map("admission_type")
  sampleCount           Int      @map("sample_count")
  averageResponseTime   Float    @map("average_response_time")
  lastUpdated           DateTime @updatedAt @map("last_updated")

  @@unique([creditorId, triggerPhrase], name: "creditorId_triggerPhrase")
  @@index([creditorId])
  @@index([successRate])
  @@map("response_patterns")
}

model CollectiveIntelligence {
  id                    String   @id @default(cuid())
  creditorId            String   @unique @map("creditor_id")
  violationPattern      String   @map("violation_pattern")
  affectedUsers         Int      @map("affected_users")
  totalHarm             Float    @map("total_harm")
  evidenceStrength      String   @map("evidence_strength") // 'weak', 'moderate', 'strong', 'conclusive'
  classActionEligible   Boolean  @map("class_action_eligible")
  winningStrategies     String   @map("winning_strategies") // JSON array
  averagePdiImpact      Float    @map("average_pdi_impact")
  lastUpdated           DateTime @updatedAt @map("last_updated")

  @@index([classActionEligible])
  @@index([evidenceStrength])
  @@map("collective_intelligence")
}

// For blockchain evidence integration
model BlockchainEvidence {
  id                    String   @id @default(cuid())
  caseId                String   @map("case_id")
  documentType          String   @map("document_type")     // 'GDPR_REQUEST', 'GDPR_RESPONSE', etc.
  contentHash           String   @map("content_hash")      // SHA-256 hash
  blockchainTxId        String   @unique @map("blockchain_tx_id")
  blockNumber           Int?     @map("block_number")
  timestamp             DateTime
  proofUrl              String   @map("proof_url")
  ipfsHash              String?  @map("ipfs_hash")
  verified              Boolean  @default(false)
  createdAt             DateTime @default(now()) @map("created_at")

  @@index([caseId])
  @@index([contentHash])
  @@index([blockchainTxId])
  @@map("blockchain_evidence")
}